/**
 * @generated VGen (for ANTLR) 1.7.2
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Programa { List<Definicion> definiciones; }
	public Object visit(Programa node, Object param) {

		// super.visit(node, param);

		if (node.getDefiniciones() != null)
			for (Definicion child : node.getDefiniciones())
				child.accept(this, param);

		return null;
	}

	//	class TipoSimple { String name;  Tipo tipo; }
	public Object visit(TipoSimple node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class TipoStruct { String name;  List<Definicion> defsNoVar; }
	public Object visit(TipoStruct node, Object param) {

		// super.visit(node, param);

		if (node.getDefsNoVar() != null)
			for (Definicion child : node.getDefsNoVar())
				child.accept(this, param);

		return null;
	}

	//	class TipoFuncion { String name;  List<Definicion> params;  Tipo returnType;  List<Sentencia> sentencias; }
	public Object visit(TipoFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Definicion child : node.getParams())
				child.accept(this, param);

		if (node.getReturnType() != null)
			node.getReturnType().accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class TipoFuncionSinRetorno { String name;  List<Definicion> params;  List<Sentencia> sentencias; }
	public Object visit(TipoFuncionSinRetorno node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Definicion child : node.getParams())
				child.accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class TipoComplejo { String name;  String estructura; }
	public Object visit(TipoComplejo node, Object param) {
		return null;
	}

	//	class TipoInt {  }
	public Object visit(TipoInt node, Object param) {
		return null;
	}

	//	class TipoChar {  }
	public Object visit(TipoChar node, Object param) {
		return null;
	}

	//	class TipoFloat {  }
	public Object visit(TipoFloat node, Object param) {
		return null;
	}

	//	class Ident {  }
	public Object visit(Ident node, Object param) {
		return null;
	}

	//	class ArithmeticExpresion { Expresion l;  String op;  Expresion r; }
	public Object visit(ArithmeticExpresion node, Object param) {

		// super.visit(node, param);

		if (node.getL() != null)
			node.getL().accept(this, param);

		if (node.getR() != null)
			node.getR().accept(this, param);

		return null;
	}

	//	class ParamExpresion { List<String> parametro; }
	public Object visit(ParamExpresion node, Object param) {
		return null;
	}

	//	class IfStatement { Expresion expr;  List<Sentencia> ifTrue;  List<Sentencia> ifFalse; }
	public Object visit(IfStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		if (node.getIfTrue() != null)
			for (Sentencia child : node.getIfTrue())
				child.accept(this, param);

		if (node.getIfFalse() != null)
			for (Sentencia child : node.getIfFalse())
				child.accept(this, param);

		return null;
	}

	//	class WhileStatement { Expresion expr;  List<Sentencia> code; }
	public Object visit(WhileStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		if (node.getCode() != null)
			for (Sentencia child : node.getCode())
				child.accept(this, param);

		return null;
	}

	//	class Asignacion { Expresion left;  Expresion right; }
	public Object visit(Asignacion node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class PrintStatement { Expresion expr; }
	public Object visit(PrintStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class ReadStatement { Expresion expr; }
	public Object visit(ReadStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class ReturnStatement { Expresion expr; }
	public Object visit(ReturnStatement node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class LlamadaFunc { String nombre;  List<Expresion> params; }
	public Object visit(LlamadaFunc node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Expresion child : node.getParams())
				child.accept(this, param);

		return null;
	}

	//	class LlamadaCampo { Expresion estructura;  String nombre; }
	public Object visit(LlamadaCampo node, Object param) {

		// super.visit(node, param);

		if (node.getEstructura() != null)
			node.getEstructura().accept(this, param);

		return null;
	}
}
